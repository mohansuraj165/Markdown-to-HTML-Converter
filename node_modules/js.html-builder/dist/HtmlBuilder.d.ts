import { AbstractFactory, JsDsl } from "js-dsl";
import { Config } from "js-dsl/dist";
export declare type Primitive = string | number | boolean;
export declare type Value = Primitive;
export declare type Attributes = {
    [k in string]: Primitive;
};
export declare type ElementOpts = {
    tag: string;
    noClosingTag: boolean;
} & Attributes;
/**
 * Represents an element node in the DSL's object hierarchy.
 */
export declare class Element {
    /**
     * The element's tag, e.g. div or span
     */
    tag: string;
    /**
     * This is a void element, no closing tag is required
     * @type {boolean}
     */
    noClosingTag: boolean;
    attributes: Attributes;
    /**
     * The element's content
     */
    value: Primitive | null;
    /**
     * Child elements
     */
    children: Array<Element>;
    isComment: boolean;
    constructor(opts: ElementOpts, attributes: Attributes, value: Value);
    addChild(child: Element): void;
    toHtml(prefix?: string): string;
}
export declare class ElementFactory extends AbstractFactory<Element, Element> {
    opts: Attributes;
    constructor(opts?: Attributes);
    newInstance(builder: JsDsl, name: string, attr: Attributes, value: Value): Element;
    setChild(builder: JsDsl, parent: Element, child: Element): void;
}
export declare class BlockFactory extends ElementFactory {
    getBuilder(parent: JsDsl): BlockBuilder;
}
export declare class MainBuilder extends JsDsl {
    register(): void;
}
export declare class HeadBuilder extends JsDsl {
    register(): void;
}
export declare class BlockBuilder extends JsDsl {
    register(): void;
}
export declare class HtmlBuilder extends JsDsl {
    register(): void;
}
/**
 * Accepts a configuration function which is responsible for specifying node
 * hierarchy. Builds the node hierarchy and returns the root element (html).
 *
 * @param {Config} f the configuration function
 * @returns {Element} the root element
 */
export declare function htmlBuilder(f: Config): Element;
/**
 * Accepts a configuration function which is responsible for specifying node
 * hierarchy. Builds the node hierarchy and returns the root element (any block
 * element).
 *
 * @param {Config} f the configuration function
 * @returns {Element} the root element
 */
export declare function snippetBuilder(f: Config): Element;
