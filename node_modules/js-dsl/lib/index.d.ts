/** Declaration file generated by dts-gen */

export type Config = () => void

export class AbstractFactory<P, T> {
    getBuilder(parent: JsDsl): JsDsl;

    isLeaf(): boolean;

    newInstance(builder: JsDsl, name: String, ...args: any[]): T;

    onNodeCompleted(builder: JsDsl, parent: P, child: T): void;

    setChild(builder: JsDsl, parent: P, child: T): void;

    setParent(builder: JsDsl, parent: P, child: T): void;
}

export class JsDsl {
    constructor(...args:any[]);

    build<E>(f: Config): E;

    buildFile(fileName: String, ...args: any[]): void;

    register(...args: any[]): void;

    registerFactory<P, T>(name: String, factory: AbstractFactory<P, T>): void;

    registerMethodNames(names: String[]): void;

    registerPropertyNames(names: String[]): void;

    register(): void;
}

